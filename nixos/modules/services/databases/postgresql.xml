<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:id="module-postgresql">

<title>PostgreSQL</title>

<para><emphasis>Source:</emphasis> <filename>modules/services/databases/postgresql.nix</filename></para>

<para><emphasis>Upstream documentation:</emphasis> <link xlink:href="http://www.postgresql.org/docs/"/></para>

<para><emphasis>Maintainer:</emphasis> Austin Seipp</para>

<para><emphasis>Default version:</emphasis> 10.x</para>

<para>PostgreSQL is an advanced, free, feature-rich relational database. NixOS
provides multiple versions of PostgreSQL, as well as a set of extensions that
provide powerful features on top of the default installation.</para>

<section xml:id="module-services-postgres-intro-packaging-infra">
<title>Introduction to the PostgreSQL packaging infrastructure</title>

<para>NixOS provides multiple versions of PostgreSQL, available as
<emphasis>sets</emphasis> of packages, which you use to configure the
PostgreSQL system services and specify extensions. Extensions are available
only for the correct PostgreSQL versions that they are compatible with, and
they are automatically built against the proper PostgreSQL server for
you.</para>

<para>The available set of PostgreSQL packages are available under the name
<literal>pkgs.postgresqlXXPackages</literal>, where <literal>XX</literal>
contains the major version number, without any bugfix releases. For example,
the following are all available:

<programlisting>
pkgs.postgresql93Packages
pkgs.postgresql94Packages
pkgs.postgresql95Packages
pkgs.postgresql96Packages
pkgs.postgresql10Packages

# points to default version specified by Nixpkgs
pkgs.postgresqlPackages
</programlisting>
</para>

<para>These names are each attribute sets containing A) the
<literal>.postgresql</literal> attribute, pointing to the derivation for the
PostgreSQL server, and an assorted set of other attributes which specify
extensions that can be installed into the server. Because extensions are tied
to the version of PostgreSQL they're built against, they must all be bundled
together. For example, the following attributes yield the derivations for
PostgreSQL 9.6, and the PostGIS extension built against PostgreSQL 9.6:

<programlisting>
pkgs.postgresql96Packages.postgres
pkgs.postgresql96Packages.postgis
</programlisting>
</para>

</section>

<section xml:id="module-services-postgres-configuring"><title>Configuring</title>

<para>To enable PostgreSQL, add the following to your
<filename>configuration.nix</filename>:

<programlisting>
<xref linkend="opt-services.postgresql.enable"/> = true;
<xref linkend="opt-services.postgresql.package"/> = pkgs.postgresql94;
</programlisting>

Note that you are required to specify the desired version of PostgreSQL (e.g.
<literal>pkgs.postgresql96Packages</literal>). Since upgrading your PostgreSQL
version requires a database dump and reload (see below), NixOS cannot provide a
default value for <xref linkend="opt-services.postgresql.package"/> such as the
most recent release of PostgreSQL.</para>

<para>After running <command>nixos-rebuild</command>, you can verify
whether PostgreSQL works by running <command>psql</command>:

<programlisting>
$ sudo -u postgres psql
psql (9.2.9)
Type "help" for help.

postgres=>
</programlisting>
</para>

<para>By default, PostgreSQL stores its databases in
<filename>/var/db/postgresql</filename>. You can override this using
<xref linkend="opt-services.postgresql.dataDir"/>, e.g.

<programlisting>
<xref linkend="opt-services.postgresql.dataDir"/> = "/data/postgresql";
</programlisting>

</para>

</section>

<section xml:id="module-services-postgres-extensions"><title>Enabling and installing extensions</title>

<para>In order to install extensions, use the
<option>services.postgresql.plugins</option> option. This option should contain
a function which takes an attribute set, and from that attribute set, returns a
list of the extensions the user wishes to enable. This extension set is the
same one specified by <option>services.postgresql.packages</option>.</para>

<para>For example, to enable the PostGIS and TimescaleDB extension, you can
say:

<programlisting>
services.postgresql.plugins = p: with p;
  [ postgis
    timescaledb
  ];
</programlisting>
</para>

<para>This example imports the set of PostgreSQL attributes into scope and
selects the <literal>postgis</literal> and <literal>timescaledb</literal>
attributes. Note that not all of these attributes are available for every
version of PostgreSQL, e.g. TimescaleDB does not work with PostgreSQL 9.5.
Should you specify v9.5 (using <option>services.postgresql.packages</option>),
the above example would fail with an evaluation error.</para>

<para>Once this has been done and <command>nixos-rebuild</command> has been
run, you may run <literal>CREATE EXTENSION></literal> in order to
install the extension for the given database you've selected:

<programlisting>
postgres=> CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;
</programlisting>
</para>

<para>Any functions, types, etc that are provided by the extension should
now be available.</para>
</section>

<section xml:id="module-services-postgres-upgrading"><title>Upgrading</title>

<para>This section will be brief. Be sure to read the
<link xlink:href="https://www.postgresql.org/docs/current/static/upgrading.html">official
PostgreSQL Upgrading documentation</link> for more detailed information
about the steps below. This section will use the <command>pg_dumpall</command>
method.</para>

<para>First, you must dump all data from the server using
<command>pg_dumpall</command>, but this must be executed by the
<emphasis>new</emphasis> version of the PostgreSQL tools. This can be done
easily using the existing Postgres infrastructure, by using <command>nix-shell</command>
in order to install the tools:

<programlisting>
a@link> nix-shell -p 'postgresql10Packages.withPackages (_: [])'
[nix-shell:~]$ sudo -u postgres pg_dumpall > dumpfile
</programlisting>
</para>

<para>At this point, the file <literal>dumpfile</literal> contains a dump of
the entire server, and can be backed up or transported elsewhere. Also note
that the above command is analagous to the NixOS module configuration: you
can enter a shell with extensions available, by selecting them from the
attribute set provided to the lambda. The above example uses no extensions.
</para>

<para>Next, stop the PostgreSQL service using <command>systemctl stop</command>:

<programlisting>
[nix-shell:~]$ sudo systemctl stop postgres
</programlisting>
</para>

<para>At this point, you may move the data directory out of the way, so that
the database will be re-initialized in a clean manner once the new
server version is installed. By default, the NixOS module for
PostgreSQL installs each database by default into its own directory
under <literal>/var/lib/postgresql</literal> with a unique name based
on the version number, so installing a new version will not overwrite
data from the old one. However, you may wish to do this anyway at this
point, and you <emphasis>must</emphasis> do it if you changed the data
directory yourself:

<programlisting>
[nix-shell:~]$ sudo mv /var/lib/postgresql/* ...
</programlisting>
</para>

<para>Finally, upgrade your <literal>configuration.nix</literal> to point the
<xref linkend="opt-services.postgresql.packages"/> option to point to the new
version of PostgreSQL; for example, <literal>postgresql10Packages</literal>.
Then start the new service using <command>nixos-rebuild switch</command>. Note
that you do not need to keep a backup or resupply copies of any configuration
files, since they're managed by Nix. However, you might want to make some tweaks
for the new version of the server, as well.</para>

<para>At this point, you can simply use <command>psql</command> in order to load
the old data into the new server, including roles, databases, etc:

<programlisting>
[nix-shell:~]$ sudo -u postgres psql -d postgres -f dumpfile
</programlisting>
</para>

</section>

<section xml:id="module-services-postgres-options"><title>Options</title>

<para>A complete list of options for the PostgreSQL module may be found <link
linkend="opt-services.postgresql.enable">here</link>.</para>

</section>

<section><title>Authoring new extensions</title>

<para>FIXME: document how to write an extension</para>

</section>

</chapter>
